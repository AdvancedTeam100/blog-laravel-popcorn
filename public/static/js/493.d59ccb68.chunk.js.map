{"version":3,"file":"static/js/493.d59ccb68.chunk.js","mappings":"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","sources":["pages/users/UserList.tsx","redux/actionCreators/userActions.tsx"],"sourcesContent":["import React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ReactElement, FC } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nimport { Avatar } from \"@mui/material\";\r\nimport Switch, { SwitchProps } from '@mui/material/Switch';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\n\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { ChangeUserStatus, DeleteUserAction, GetUsers } from \"../../redux/actionCreators/userActions\";\r\nimport { RootState } from \"../../redux/store/store\";\r\nimport { ThemeColor } from \"../../styles/GlobalStyle\";\r\nimport { baseURL, serverUrl } from \"../../services/axios\";\r\nimport { relative } from \"path\";\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: ThemeColor.main800,\r\n    color: theme.palette.common.white,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(odd)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  // hide last border\r\n  \"&:last-child td, &:last-child th\": {\r\n    border: 0,\r\n  },\r\n}));\r\n\r\n\r\nconst StatusSwitch = styled(Switch)(({ theme }) => ({\r\n  padding: 8,\r\n  '& .MuiSwitch-track': {\r\n    borderRadius: 22 / 2,\r\n    '&:before, &:after': {\r\n      content: '\"\"',\r\n      position: 'absolute',\r\n      top: '50%',\r\n      transform: 'translateY(-50%)',\r\n      width: 16,\r\n      height: 16,\r\n    },\r\n    '&:before': {\r\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\r\n        theme.palette.getContrastText(theme.palette.primary.main),\r\n      )}\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"/></svg>')`,\r\n      left: 12,\r\n    },\r\n    '&:after': {\r\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\r\n        theme.palette.getContrastText(theme.palette.primary.main),\r\n      )}\" d=\"M19,13H5V11H19V13Z\" /></svg>')`,\r\n      right: 12,\r\n    },\r\n  },\r\n  '& .MuiSwitch-thumb': {\r\n    boxShadow: 'none',\r\n    width: 16,\r\n    height: 16,\r\n    margin: 2,\r\n  },\r\n}));\r\n\r\nconst UserList: FC = (): ReactElement => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const users = useSelector((state: RootState) => state.users.users);\r\n  const [userList, setUserList] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    dispatch(GetUsers(navigate));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setUserList(users);\r\n  }, [users])\r\n\r\n  const changeStatus = (id:any) => {\r\n    let tmp:any[] = [];\r\n    userList.forEach((user1: any) => {\r\n      if(id == user1.id){\r\n        if(user1.status == '1') {\r\n          user1.status = '2';\r\n        } else {\r\n          user1.status = '1';\r\n        }\r\n      }\r\n\r\n      tmp.push(user1);\r\n    });\r\n\r\n    setUserList(tmp);\r\n  }\r\n\r\n  // const handleClick = (id:any) => {\r\n  //   console.log(id);\r\n  //   dispatch(ChangeUserStatus(navigate, id));\r\n  //   changeStatus(id);\r\n\r\n  // }\r\n\r\n\r\n  const handleClick = (id:any) => {\r\n    dispatch(ChangeUserStatus(navigate, id));\r\n\r\n    const updatedUsers = userList.map((user) => {\r\n      if (user.id === id) {\r\n        return { ...user, status: user.status != '1' ? '1' : '2'};\r\n      }\r\n      return user;\r\n    });\r\n    setUserList(updatedUsers);\r\n\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: \"90%\" }}>\r\n      <Typography\r\n        sx={{\r\n          fontSize: \"2rem\",\r\n          mt: 4,\r\n          mb: 4,\r\n          color: ThemeColor.main,\r\n          fontWeight: \"600\",\r\n        }}\r\n        variant=\"h4\"\r\n      >\r\n        ユーザーリスト\r\n      </Typography>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"center\">画像</StyledTableCell>\r\n              <StyledTableCell  align=\"center\">ユーザーID</StyledTableCell>\r\n              <StyledTableCell align=\"center\">名前</StyledTableCell>\r\n              <StyledTableCell align=\"center\">ふりがな</StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                メールアドレス\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">アカウント種別</StyledTableCell>\r\n              <StyledTableCell align=\"center\">グループ</StyledTableCell>\r\n              <StyledTableCell align=\"center\">編集</StyledTableCell>\r\n              <StyledTableCell align=\"center\">削除</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {userList?.map((user: any) => (\r\n              <StyledTableRow\r\n                key={user.id}\r\n                sx={{ backgroundColor: \"#35485b2e\" }}\r\n              >\r\n                <StyledTableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                  <Avatar\r\n                    sx={{\r\n                      width: 35,\r\n                      height: 35,\r\n                      m: \"auto\",\r\n                      p: 0,\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                    src={`${serverUrl}upload/images/${user.avatar}`}\r\n                  />\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">{user.user_id}</StyledTableCell>\r\n\r\n                <StyledTableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                  {user.name}\r\n                </StyledTableCell>\r\n\r\n                <StyledTableCell align=\"center\">\r\n                  {user.read_name}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">{user.email}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {user.role_id == 2 ? \"チームリーダー\" : \"ユーザー\"}\r\n                </StyledTableCell>\r\n\r\n                <StyledTableCell align=\"center\">\r\n                  {user.group?.name}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  <Button onClick={() => navigate(\"/user/edit/\" + user.id, { replace: true })} variant=\"outlined\" color=\"success\">\r\n                    編集\r\n                  </Button>\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\" sx={{position: 'relative'}}>\r\n                  {/* <Button onClick={() => {if(user.role_id != 2) { return dispatch(DeleteUserAction(user.id, navigate)) } } } variant=\"outlined\" color=\"error\">\r\n                    削除\r\n                  </Button>  */}\r\n                  <FormControlLabel\r\n                  sx={{ alignContent: 'center' }}\r\n                  control={<StatusSwitch defaultChecked onClick={() => handleClick(user?.id)} />} // Add onClick event handler\r\n                  label=\"\"\r\n                  checked = {user?.status == '1' ? true: false}\r\n                />\r\n                </StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n      \r\n            \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import { Dispatch } from \"redux\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport axios from \"../../services/axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { IAuth as Auth, IBasicData } from \"../../models/auth\";\r\nimport { ThunkResult } from \"./actionResultTypes\";\r\n\r\nimport {\r\n  Action,\r\n  ActionType,\r\n  IUserProfileStart,\r\n  IUserProfileSuccess,\r\n  IUserProfileFail,\r\n  ICreateUserStart,\r\n  ICreateUserSuccess,\r\n  ICreateUserFail,\r\n  IGetUserStart,\r\n  IGetUserSuccess,\r\n  IGetUserFail,\r\n  IGetBasicCategoriesSuccess,\r\n  IGetAllGroups,\r\n  IGetAllCategories,\r\n  IGetAllGenres,\r\n  IGetBlogs,\r\n  IGetBlog,\r\n  IGetNewBlog,\r\n  ISearchBlogs,\r\n  IGetUserById,\r\n} from \"../actionTypes/userActionTypes\";\r\n\r\nimport { ToastMessage } from \"../../util/toast\";\r\n\r\ntype Config = {\r\n  headers: Record<string, string>;\r\n};\r\n\r\nexport const getData = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<IBasicData> = await axios.get(\r\n      `/auth/user/categories`\r\n    );\r\n\r\n    dispatch<IGetBasicCategoriesSuccess>({\r\n      type: ActionType.GET_BASIC_CATEGORIES_SUCCESS,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const getAllGroups = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<IBasicData> = await axios.get(\r\n      `/auth/user/group/getall`\r\n    );\r\n\r\n    dispatch<IGetAllGroups>({\r\n      type: ActionType.GET_ALL_GROUPS,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const getAllCategories =\r\n  (): any => async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/category/all`\r\n      );\r\n\r\n      dispatch<IGetAllCategories>({\r\n        type: ActionType.GET_ALL_CATEGORIES,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const getAllGenres = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<any> = await axios.get(`/auth/genre/all`);\r\n\r\n    dispatch<IGetAllGenres>({\r\n      type: ActionType.GET_ALL_GENRES,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const GetBlogs =\r\n  (genre_id: string): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/blog/${genre_id}`\r\n      );\r\n\r\n      dispatch<IGetBlogs>({\r\n        type: ActionType.GET_BLOGS,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const GetNewBlogs = (): any => async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    const response: AxiosResponse<any> = await axios.get(\r\n      `/auth/blog/new_blogs`\r\n    );\r\n\r\n    dispatch<IGetNewBlog>({\r\n      type: ActionType.GET_NEW_BLOGS,\r\n      payload: response.data,\r\n    });\r\n  } catch (error: any) {\r\n    ToastMessage(error.response);\r\n  }\r\n};\r\n\r\nexport const GetSearchResult =\r\n  (search: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/blog/search`,\r\n        search\r\n      );\r\n\r\n      dispatch<ISearchBlogs>({\r\n        type: ActionType.GET_SEARCH_BLOGS,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const GetBlog =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/blog/show/${id}`\r\n      );\r\n\r\n      dispatch<IGetBlog>({\r\n        type: ActionType.GET_BLOG,\r\n        payload: response.data,\r\n      });\r\n    } catch (error: any) {\r\n      ToastMessage(error.response);\r\n    }\r\n  };\r\n\r\nexport const AddUser =\r\n  (navigate: any, user: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<Auth> = await axios.post(\r\n        `/auth/user/create`,\r\n        user,\r\n        config\r\n      );\r\n\r\n      dispatch<ICreateUserSuccess>({\r\n        type: ActionType.CREATE_USER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n\r\n      navigate(\"/user/index\");\r\n    } catch (err: any) {\r\n      dispatch<ICreateUserFail>({\r\n        type: ActionType.CREATE_USER_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const EditUserAction =\r\n  (navigate: any, user: any, id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/user/update/${id}`,\r\n        user,\r\n        config\r\n      );\r\n      ToastMessage(response);\r\n      navigate(\"/user/index\");\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const DeleteUserAction =\r\n  (id: any, navigate: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      // alert(id);\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/user/delete/${id}`,\r\n        config\r\n      );\r\n\r\n      dispatch<IGetUserSuccess>({\r\n        type: ActionType.GET_USERS_SUCCESS,\r\n        payload: response.data.users,\r\n      });\r\n\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const AddLeader =\r\n  (navigate: any, user: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<Auth> = await axios.post(\r\n        `/auth/leader/create`,\r\n        user,\r\n        config\r\n      );\r\n\r\n      dispatch<ICreateUserSuccess>({\r\n        type: ActionType.CREATE_USER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n\r\n      // navigate(\"/user/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n      dispatch<ICreateUserFail>({\r\n        type: ActionType.CREATE_USER_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const EditLeaderAction =\r\n  (navigate: any, user: any, id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/leader/update/${id}`,\r\n        user,\r\n        config\r\n      );\r\n      ToastMessage(response);\r\n      navigate(\"/user/index\");\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const GetUsers =\r\n  (navigate: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(`/auth/user/index`);\r\n\r\n      dispatch<IGetUserSuccess>({\r\n        type: ActionType.GET_USERS_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n      dispatch<IGetUserFail>({\r\n        type: ActionType.GET_USERS_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const GetUserById =\r\n  (id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const response: AxiosResponse<any> = await axios.get(\r\n        `/auth/user/get/${id}`\r\n      );\r\n\r\n      dispatch<IGetUserById>({\r\n        type: ActionType.GET_USER_BY_ID,\r\n        payload: response.data,\r\n      });\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\n\r\nexport const AddGenre =\r\n  (navigate: any, step: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/genre/create`,\r\n        step,\r\n        config\r\n      );\r\n\r\n      // navigate(\"/genre/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\nexport const AddBlog =\r\n  (navigate: any, blog: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/blog/create`,\r\n        blog,\r\n        config\r\n      );\r\n\r\n      // navigate(\"/blog/index\");\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };\r\n\r\n  export const ChangeUserStatus =\r\n  (navigate: any, id: any): any =>\r\n  async (dispatch: Dispatch<Action>) => {\r\n    try {\r\n      const config: Config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `/auth/user/changestatus/${id}`,\r\n        config\r\n      );\r\n\r\n      ToastMessage(response);\r\n    } catch (err: any) {\r\n      ToastMessage(err.response);\r\n    }\r\n  };"],"names":["StyledTableCell","styled","TableCell","theme","tableCellClasses","backgroundColor","ThemeColor","color","palette","common","white","fontSize","StyledTableRow","TableRow","action","hover","border","StatusSwitch","Switch","padding","borderRadius","content","position","top","transform","width","height","backgroundImage","encodeURIComponent","getContrastText","primary","main","left","right","boxShadow","margin","dispatch","useDispatch","navigate","useNavigate","users","useSelector","state","useState","userList","setUserList","useEffect","GetUsers","sx","mt","mb","fontWeight","variant","component","Paper","align","map","user","scope","m","p","justifyContent","src","serverUrl","avatar","user_id","name","read_name","email","role_id","group","onClick","id","replace","alignContent","control","defaultChecked","ChangeUserStatus","updatedUsers","status","handleClick","label","checked","getAllCategories","axios","response","type","ActionType","payload","data","ToastMessage","GetNewBlogs","GetSearchResult","search","AddUser","config","headers","EditUserAction","AddLeader","EditLeaderAction","GetUserById","AddGenre","step"],"sourceRoot":""}